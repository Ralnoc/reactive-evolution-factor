on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    outputs:
      status: ${{ steps.upload-release-asset.conclusion }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate Changelog
        run: |
          #!/usr/bin/env bash
          if [ -f changelog.txt ]; then
            rm changelog.txt
          fi
          
          for tag in $(git --no-pager tag --sort=-creatordate --merged main); do
            echo "---------------------------------------------------------------------------------------------------" >> changelog.txt
            echo "Version: $tag" >> changelog.txt
            echo "$(git --no-pager log --pretty=%ad --date=format:'Date: %m. %d. %Y' -1 $tag)" >> changelog.txt
            echo "Changes:" | sed 's/^/  /' >> changelog.txt
            git --no-pager show --pretty=format:"%B" --no-patch -1 $tag | sed 's/^* /    - /' | sed '1d'  >> changelog.txt
          done
      - name: Build project
        run: |
          ROOT_DIR=$(pwd)
          mkdir -p ${ROOT_DIR}/build
          mkdir -p ${ROOT_DIR}/build/reactive-evolution-factor_${{ github.ref_name }}
          cp -r ${ROOT_DIR}/*.lua ${ROOT_DIR}/*.json ${ROOT_DIR}/*.png changelog.txt ${ROOT_DIR}/locale README.md  ${ROOT_DIR}/build/reactive-evolution-factor_${{ github.ref_name }}/.
          cd ${ROOT_DIR}/build || exit 1
          sed -i "s/@@VERSION@@/${{ github.ref_name }}/g" reactive-evolution-factor_${{ github.ref_name }}/info.json
          zip -r ${ROOT_DIR}/build/reactive-evolution-factor_${{ github.ref_name }}.zip reactive-evolution-factor_${{ github.ref_name }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: reactive-evolution-factor_${{ github.ref_name }}
          path: ./build/reactive-evolution-factor_${{ github.ref_name }}.zip
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: checkout repo content
        uses: actions/checkout@v2
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: install python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/workflows/requirements.txt
          mkdir -p ./build
      - name: Download Artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: reactive-evolution-factor_${{ github.ref_name }}
          path: ./build
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURR_TAG: ${{ github.ref_name }}
        run: |
          set +e
          PREV_TAG=$(git describe --tags --abbrev=0 ${CURR_TAG}^ 2> /dev/null)
          set -e
          if [ -z "${PREV_TAG}" ]; then
            RELEASE_NOTES=$(git log --format=%B -n 1 ${CURR_TAG})
          else
            TAG_RANGE="${PREV_TAG}..${CURR_TAG}"
            NUM_COMMITS=$(($(git rev-list --count "${TAG_RANGE}" 2> /dev/null) - 1))
            RELEASE_NOTES=$(git log --format=%B -n ${NUM_COMMITS} "${TAG_RANGE}")
          fi
          gh release create "${CURR_TAG}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release ${CURR_TAG}" \
              --notes="${RELEASE_NOTES}"
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          CURR_TAG: ${{ github.ref_name }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.download_artifact.outputs.download-path }}/reactive-evolution-factor_${{ github.ref_name }}.zip
          asset_name: reactive-evolution-factor_${{ github.ref_name }}
          asset_content_type: application/zip
      - name: execute publish script
        env:
          FACTORION_MOD_API_KEY: ${{ secrets.FACTORION_MOD_API_KEY }}
          MOD_NAME: reactive-evolution-factor
          RELEASE_ARTIFACT_PATH: ${{ steps.download_artifact.outputs.download-path }}/reactive-evolution-factor_${{ github.ref_name }}.zip
        run: python publish.py